name: Publish Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run a dry run (do not actually publish)'
        required: false
        default: false
        type: boolean

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint code
        run: npm run lint
        continue-on-error: false
      
      - name: Run tests
        run: npm run test:all
      
      - name: Build package
        run: npm run build
      
      - name: Check build artifacts
        run: |
          ls -la dist/
          echo "Checking if all required files exist..."
          test -f dist/index.js || (echo "Missing dist/index.js" && exit 1)
          test -f dist/index.esm.js || (echo "Missing dist/index.esm.js" && exit 1)
          test -f dist/index.d.ts || (echo "Missing dist/index.d.ts" && exit 1)
      
      - name: Verify package integrity
        run: npm pack --dry-run
      
      - name: Check package version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          RELEASE_TAG=${GITHUB_REF#refs/tags/}
          if [ "$GITHUB_EVENT_NAME" = "release" ] && [ "v$PACKAGE_VERSION" != "$RELEASE_TAG" ]; then
            echo "Package version ($PACKAGE_VERSION) does not match release tag ($RELEASE_TAG)"
            exit 1
          fi
          echo "Version validation passed: $PACKAGE_VERSION"
      
      - name: Publish to npm (dry run)
        if: github.event.inputs.dry_run == 'true'
        run: npm publish --dry-run --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Publish to npm
        if: github.event.inputs.dry_run != 'true'
        run: npm publish --access public --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Create success notification
        if: success() && github.event.inputs.dry_run != 'true'
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "‚úÖ Successfully published @phantasm0009/lazy-import@$PACKAGE_VERSION to npm!"
          echo "üì¶ Package URL: https://www.npmjs.com/package/@phantasm0009/lazy-import"
          echo "üöÄ Install with: npm install @phantasm0009/lazy-import"
      
      - name: Create GitHub release notes
        if: success() && github.event.inputs.dry_run != 'true' && github.event_name == 'release'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            const version = packageJson.version;
            
            const releaseNotes = `
            ## üéâ @phantasm0009/lazy-import v${version}
            
            This release has been automatically published to npm.
            
            ### üì¶ Installation
            \`\`\`bash
            npm install @phantasm0009/lazy-import@${version}
            \`\`\`
            
            ### üîó Links
            - [npm Package](https://www.npmjs.com/package/@phantasm0009/lazy-import)
            - [Documentation](https://github.com/phantasm0009/lazy-import#readme)
            - [Changelog](https://github.com/phantasm0009/lazy-import/blob/main/CHANGELOG.md)
            `;
            
            // Add comment to release if it exists
            try {
              const { data: release } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: `v${version}`
              });
              
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
                body: release.body + releaseNotes
              });
            } catch (error) {
              console.log('No release found or error updating:', error.message);
            }
      
      - name: Post-publish verification
        if: success() && github.event.inputs.dry_run != 'true'
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Waiting for npm registry propagation..."
          sleep 30
          
          # Verify package is available on npm
          if npm view @phantasm0009/lazy-import@$PACKAGE_VERSION version; then
            echo "‚úÖ Package successfully available on npm registry"
          else
            echo "‚ö†Ô∏è Package not yet visible on npm registry (may take a few minutes)"
          fi

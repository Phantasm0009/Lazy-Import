name: Auto Publish to npm

on:
  push:
    branches: [main]
    paths:
      - 'package.json'
      - 'src/**'
      - 'dist/**'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: 'Run a dry run (do not actually publish)'
        required: false
        default: false
        type: boolean

jobs:
  check-version:
    name: Check Version Changes
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version_check.outputs.changed }}
      new_version: ${{ steps.version_check.outputs.version }}
      should_publish: ${{ steps.publish_check.outputs.should_publish }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check if version changed
        id: version_check
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=workflow_dispatch" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "release" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            # Check if package.json version changed in the last commit
            if git diff HEAD~1 HEAD --name-only | grep -q "package.json"; then
              OLD_VERSION=$(git show HEAD~1:package.json | jq -r '.version')
              NEW_VERSION=$(jq -r '.version' package.json)
              if [ "$OLD_VERSION" != "$NEW_VERSION" ]; then
                echo "changed=true" >> $GITHUB_OUTPUT
                echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
                echo "📦 Version changed from $OLD_VERSION to $NEW_VERSION"
              else
                echo "changed=false" >> $GITHUB_OUTPUT
                echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
                echo "📦 Version unchanged: $NEW_VERSION"
              fi
            else
              echo "changed=false" >> $GITHUB_OUTPUT
              CURRENT_VERSION=$(jq -r '.version' package.json)
              echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
              echo "📦 package.json not modified"
            fi
          fi
      
      - name: Determine if should publish
        id: publish_check
        run: |
          if [ "${{ steps.version_check.outputs.changed }}" = "true" ] || [ "${{ github.event_name }}" = "release" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "🚀 Will publish to npm"
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
            echo "⏭️  Skipping npm publish - no version change"
          fi

  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.should_publish == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint code
        run: npm run lint
        continue-on-error: false
      
      - name: Run comprehensive tests
        run: npm run test:all
        continue-on-error: false
      
      - name: Build package
        run: npm run build
      
      - name: Verify build artifacts
        run: |
          echo "🔍 Checking build artifacts..."
          ls -la dist/
          
          # Check required files exist
          for file in index.js index.esm.js index.d.ts bundler.js bundler.d.ts; do
            if [ ! -f "dist/$file" ]; then
              echo "❌ Missing required file: dist/$file"
              exit 1
            else
              echo "✅ Found: dist/$file"
            fi
          done
          
          echo "📊 Build artifact sizes:"
          du -h dist/*
      
      - name: Package integrity check
        run: |
          echo "🔍 Running package integrity checks..."
          npm pack --dry-run
          
          # Check package.json validity
          if ! jq empty package.json; then
            echo "❌ package.json is not valid JSON"
            exit 1
          fi
          
          echo "✅ Package integrity verified"

  auto-version:
    name: Auto Version Bump
    runs-on: ubuntu-latest
    needs: [check-version, test-and-build]
    if: github.event_name == 'workflow_dispatch' && needs.check-version.outputs.should_publish == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Version bump
        run: |
          echo "🔢 Bumping version (${{ github.event.inputs.version_bump }})"
          npm version ${{ github.event.inputs.version_bump }} --no-git-tag-version
          
          NEW_VERSION=$(jq -r '.version' package.json)
          echo "📦 New version: $NEW_VERSION"
          
          # Update CHANGELOG if it exists
          if [ -f CHANGELOG.md ]; then
            DATE=$(date +"%Y-%m-%d")
            sed -i "1i\\## [$NEW_VERSION] - $DATE\\n\\n### Changed\\n- Automated version bump\\n" CHANGELOG.md
            echo "📝 Updated CHANGELOG.md"
          fi
      
      - name: Commit version bump
        run: |
          NEW_VERSION=$(jq -r '.version' package.json)
          git add package.json package-lock.json CHANGELOG.md 2>/dev/null || git add package.json package-lock.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push origin main
          echo "✅ Version bump committed and pushed"

  publish:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [check-version, test-and-build]
    if: needs.check-version.outputs.should_publish == 'true'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main # Ensure we have the latest version if auto-version ran
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build package
        run: npm run build
      
      - name: Get package info
        id: package_info
        run: |
          PACKAGE_NAME=$(jq -r '.name' package.json)
          PACKAGE_VERSION=$(jq -r '.version' package.json)
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "📦 Package: $PACKAGE_NAME@$PACKAGE_VERSION"
      
      - name: Check if version already published
        run: |
          PACKAGE_NAME="${{ steps.package_info.outputs.name }}"
          PACKAGE_VERSION="${{ steps.package_info.outputs.version }}"
          
          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version 2>/dev/null; then
            echo "⚠️  Version $PACKAGE_VERSION already exists on npm"
            if [ "${{ github.event.inputs.dry_run }}" != "true" ]; then
              echo "❌ Cannot publish existing version"
              exit 1
            fi
          else
            echo "✅ Version $PACKAGE_VERSION is new, proceeding with publish"
          fi
      
      - name: Publish to npm (dry run)
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "🧪 Running dry run publish..."
          npm publish --dry-run --access public
          echo "✅ Dry run completed successfully"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Publish to npm
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "🚀 Publishing to npm..."
          npm publish --access public --provenance
          echo "✅ Successfully published to npm!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Create GitHub Release
        if: github.event.inputs.dry_run != 'true' && github.event_name != 'release'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package_info.outputs.version }}
          release_name: Release v${{ steps.package_info.outputs.version }}
          body: |
            # 🚀 ${{ steps.package_info.outputs.name }} v${{ steps.package_info.outputs.version }}
            
            ## Installation
            ```bash
            npm install ${{ steps.package_info.outputs.name }}@${{ steps.package_info.outputs.version }}
            ```
            
            ## What's New
            This release includes the latest improvements and bug fixes.
            
            ## Links
            - [📚 Documentation](https://github.com/${{ github.repository }}#readme)
            - [📦 npm Package](https://www.npmjs.com/package/${{ steps.package_info.outputs.name }})
            - [📝 Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
            
            ---
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ needs.check-version.outputs.version }}...v${{ steps.package_info.outputs.version }}
          draft: false
          prerelease: false

  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [check-version, test-and-build, publish]
    if: always() && needs.check-version.outputs.should_publish == 'true'
    
    steps:
      - name: Notify success
        if: needs.publish.result == 'success'
        run: |
          echo "🎉 Package successfully published!"
          echo "📦 npm: https://www.npmjs.com/package/@phantasm0009/lazy-import"
          echo "🐙 GitHub: https://github.com/${{ github.repository }}"
          echo "📊 Package size: $(npm pack --dry-run 2>/dev/null | tail -1 || echo 'N/A')"
      
      - name: Notify failure
        if: needs.publish.result == 'failure' || needs.test-and-build.result == 'failure'
        run: |
          echo "❌ Publish failed!"
          echo "Please check the logs for more information."
          exit 1
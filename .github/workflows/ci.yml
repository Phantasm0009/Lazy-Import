name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test on Node.js ${{ matrix.node-version }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [16, 18, 20]
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint code
        run: npm run lint
      
      - name: Run unit tests
        run: npm run test
      
      - name: Run comprehensive tests
        run: npm run test:all
        continue-on-error: ${{ matrix.node-version == 16 }}
      
      - name: Build package
        run: npm run build
      
      - name: Test build artifacts
        run: |
          node -e "console.log('Testing CommonJS build...'); const lazy = require('./dist/index.js'); console.log('‚úÖ CJS OK');"
          node -e "console.log('Testing ES Module build...'); import('./dist/index.esm.js').then(() => console.log('‚úÖ ESM OK'));"
        shell: bash
      
      - name: Upload coverage reports
        if: matrix.node-version == 18 && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: npm audit --audit-level=moderate
      
      - name: Check for vulnerabilities
        run: |
          if npm audit --audit-level=high --json | jq '.vulnerabilities | length > 0'; then
            echo "‚ùå High severity vulnerabilities found"
            npm audit --audit-level=high
            exit 1
          else
            echo "‚úÖ No high severity vulnerabilities found"
          fi

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build package
        run: npm run build
      
      - name: Analyze bundle size
        run: |
          echo "üìä Bundle Size Analysis"
          echo "======================="
          
          if [ -f "dist/index.js" ]; then
            CJS_SIZE=$(wc -c < "dist/index.js")
            echo "CommonJS: ${CJS_SIZE} bytes"
          fi
          
          if [ -f "dist/index.esm.js" ]; then
            ESM_SIZE=$(wc -c < "dist/index.esm.js")
            echo "ES Module: ${ESM_SIZE} bytes"
          fi
          
          if [ -f "dist/bundler.js" ]; then
            BUNDLER_SIZE=$(wc -c < "dist/bundler.js")
            echo "Bundler plugins: ${BUNDLER_SIZE} bytes"
          fi
          
          echo "üìÅ All files:"
          ls -lah dist/
      
      - name: Comment bundle size on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const getFileSize = (filePath) => {
              try {
                return fs.statSync(filePath).size;
              } catch {
                return 0;
              }
            };
            
            const formatBytes = (bytes) => {
              if (bytes === 0) return '0 B';
              const k = 1024;
              const sizes = ['B', 'KB', 'MB'];
              const i = Math.floor(Math.log(bytes) / Math.log(k));
              return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            };
            
            const cjsSize = getFileSize('dist/index.js');
            const esmSize = getFileSize('dist/index.esm.js');
            const bundlerSize = getFileSize('dist/bundler.js');
            
            const comment = `
            ## üìä Bundle Size Report
            
            | File | Size |
            |------|------|
            | CommonJS | ${formatBytes(cjsSize)} |
            | ES Module | ${formatBytes(esmSize)} |
            | Bundler Plugins | ${formatBytes(bundlerSize)} |
            
            **Total**: ${formatBytes(cjsSize + esmSize + bundlerSize)}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        bundler: [vite, rollup, webpack, babel]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build package
        run: npm run build
      
      - name: Run ${{ matrix.bundler }} integration tests
        run: |
          echo "Running integration tests for ${{ matrix.bundler }}"
          npm run test:integration
        continue-on-error: true

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check documentation completeness
        run: |
          echo "üìö Checking documentation..."
          
          # Check required documentation files
          REQUIRED_FILES=(
            "README.md"
            "CHANGELOG.md"
            "API.md"
            "TUTORIAL.md"
            "MIGRATION.md"
            "FAQ.md"
            "CONTRIBUTING.md"
            "SECURITY.md"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing required documentation: $file"
              exit 1
            fi
            
            # Check if file is not empty
            if [ ! -s "$file" ]; then
              echo "‚ùå Documentation file is empty: $file"
              exit 1
            fi
          done
          
          echo "‚úÖ All required documentation files are present and non-empty"
      
      - name: Check examples
        run: |
          echo "üîç Checking examples..."
          
          # Check if examples directory exists and has content
          if [ ! -d "examples" ]; then
            echo "‚ùå Examples directory missing"
            exit 1
          fi
          
          # Count example files
          EXAMPLE_COUNT=$(find examples -name "*.js" -o -name "*.ts" -o -name "*.tsx" | wc -l)
          if [ "$EXAMPLE_COUNT" -lt 5 ]; then
            echo "‚ùå Insufficient examples (found $EXAMPLE_COUNT, need at least 5)"
            exit 1
          fi
          
          echo "‚úÖ Found $EXAMPLE_COUNT example files"
          
          # Check if examples are executable
          for example in examples/*.js; do
            if [ -f "$example" ]; then
              echo "Testing example: $example"
              timeout 10s node "$example" > /dev/null 2>&1 || echo "‚ö†Ô∏è Example $example may have issues"
            fi
          done
      
      - name: Validate links in documentation
        run: |
          echo "üîó Validating documentation links..."
          
          # Simple check for broken internal links
          for file in *.md; do
            if [ -f "$file" ]; then
              echo "Checking links in $file"
              # Check for relative links that might be broken
              grep -n '\[.*\](\./' "$file" | while read -r line; do
                echo "Found relative link in $file: $line"
              done
            fi
          done
          
          echo "‚úÖ Link validation completed"
